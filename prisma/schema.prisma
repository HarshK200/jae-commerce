// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// enums
enum OrderStatus {
    ORDERED
    SHIPPED
    DELIVERED
}

// MODELS

model Seller {
    id             String        @id @default(uuid())
    firstname      String
    lastname       String
    email          String        @unique
    password_hash  String
    phone_no       Int?
    shop_addresses ShopAddress[]
    is_verified    Boolean       @default(false)
    products       Product[]
    orders         Order[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model ShopAddress {
    id         String  @id @default(uuid())
    seller     Seller  @relation(fields: [seller_id], references: [id], onDelete: Cascade)
    seller_id  String
    address    Address @relation(fields: [address_id], references: [id], onDelete: Restrict)
    address_id String  @unique
    is_default Boolean
}

model User {
    id            String        @id @default(uuid())
    firstname     String
    lastname      String
    email         String        @unique
    password_hash String
    phone_no      Int?
    addresses     UserAddress[]
    is_verified   Boolean       @default(false)
    shopping_cart ShoppingCart?
    orders        Order[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model UserAddress {
    id         String  @id @default(uuid())
    user       User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id    String
    address    Address @relation(fields: [address_id], references: [id], onDelete: Restrict)
    address_id String  @unique
    is_default Boolean
}

model Address {
    id             String       @id @default(uuid())
    country        Country      @relation(fields: [country_id], references: [id], onDelete: Restrict)
    country_id     Int
    user_address   UserAddress?
    shop_address   ShopAddress?
    title          String
    address_line_1 String
    address_line_2 String
    city           String
    postal_code    String
    phone_no       Int
    order          Order[]
}

model Country {
    id           Int       @id @default(autoincrement())
    country_name String
    address      Address[]
}

model ProductCategory {
    id        String      @id @default(uuid())
    name      String      @unique
    products  Product[]
    variation Variation[]

    parent_category_id String?           @unique
    parent_category    ProductCategory?  @relation("ParentCategoryToChildCategory", fields: [parent_category_id], references: [id])
    child_category     ProductCategory[] @relation("ParentCategoryToChildCategory")
}

model Product {
    id            String        @id @default(uuid())
    name          String
    description   String
    product_image String
    product_items ProductItem[]

    category_id String
    category    ProductCategory @relation(fields: [category_id], references: [id], onDelete: Restrict)
    seller_id   String
    seller      Seller          @relation(fields: [seller_id], references: [id], onDelete: Restrict)
}

model ProductItem {
    id                  String             @id @default(uuid())
    product_id          String
    product             Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
    quantity_in_stock   Int
    product_image       String
    price               Decimal            @db.Decimal(10, 2)
    variation_options   VariationOption[]
    shopping_cart_items ShoppingCartItem[]
    order_items         OrderItem[]
}

model Variation {
    id                String            @id @default(uuid())
    category_id       String
    category          ProductCategory   @relation(fields: [category_id], references: [id], onDelete: Cascade)
    name              String
    variation_options VariationOption[]
}

model VariationOption {
    id            String        @id @default(uuid())
    variation_id  String
    variation     Variation     @relation(fields: [variation_id], references: [id], onDelete: Cascade)
    value         String
    product_items ProductItem[]
}

model ShoppingCart {
    id                  String             @id @default(uuid())
    user_id             String             @unique
    user                User               @relation(fields: [user_id], references: [id])
    shopping_cart_items ShoppingCartItem[]
}

model ShoppingCartItem {
    id               String       @id @default(uuid())
    shopping_cart_id String
    shopping_cart    ShoppingCart @relation(fields: [shopping_cart_id], references: [id], onDelete: Cascade)
    product_item_id  String
    product_item     ProductItem  @relation(fields: [product_item_id], references: [id], onDelete: Cascade)
    quantity         Int
}

model Order {
    id                  String      @id @default(uuid())
    user                User        @relation(fields: [user_id], references: [id])
    user_id             String
    seller              Seller      @relation(fields: [seller_id], references: [id])
    seller_id           String
    shipping_address    Address     @relation(fields: [shipping_address_id], references: [id], onDelete: Restrict)
    shipping_address_id String
    total_price_paid    Decimal     @db.Decimal(10, 2)
    order_status        OrderStatus
    order_items         OrderItem[]

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt
}

model OrderItem {
    id              String      @id @default(uuid())
    order           Order?      @relation(fields: [order_id], references: [id], onDelete: Cascade)
    order_id        String?
    product_item    ProductItem @relation(fields: [product_item_id], references: [id], onDelete: Restrict)
    product_item_id String
    quantity        Int
    price_paid      Decimal     @db.Decimal(10, 2)
}
